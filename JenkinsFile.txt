pipeline {
    agent any
    environment {
        DIRECTORY_PATH = "/path/project/testcode"
        TESTING_ENVIRONMENT = "Nick-Testing-Env"
        STAGING_ENVIRONMENT = "Nick-Staging-Env"
        PRODUCTION_ENVIRONMENT = "Nick-Prod-Env"
        EMAIL_RECIPIENT = "sugandanicholas@gmail.com"
    }
    stages {
        stage("Build") {
            steps {
                echo "Building the code using Maven"
                // Tool: Maven
            }
        }
        stage("Unit and Integration Tests") {
            steps {
                echo "Running unit tests with JUnit"
                echo "Running integration tests with TestNG"
                // Tools: JUnit, TestNG
            }
            post {
                always {
                    script {
                        def status = currentBuild.currentResult
                        emailext (
                            to: "${env.EMAIL_RECIPIENT}",
                            subject: "Unit and Integration Tests - Build ${status}",
                            body: "Unit and Integration Tests have completed with status: ${status}. The build logs attached in this email.",
                            attachLog: true
                        )
                    }
                }
            }
        }
        stage("Code Analysis") {
            steps {
                echo "Analyzing code quality with SonarQube"
                // Tool: SonarQube
            }
        }
        stage("Security Scan") {
            steps {
                echo "Performing security scan with OWASP ZAP"
                // Tool: OWASP ZAP
            }
            post {
                always {
                    script {
                        def status = currentBuild.currentResult
                        emailext (
                            to: "${env.EMAIL_RECIPIENT}",
                            subject: "Security Scan - Build ${status}",
                            body: "Security Scan has completed with status: ${status}. The build logs attached in this email.",
                            attachLog: true
                        )
                    }
                }
            }
        }
        stage("Deploy to Staging") {
            steps {
                echo "Deploying the application to staging environment: ${env.STAGING_ENVIRONMENT}"
                // Tool: AWS
            }
        }
        stage("Integration Tests on Staging") {
            steps {
                echo "Running integration tests on the staging environment"
                // Tool: TestNG
            }
        }
        stage("Deploy to Production") {
            steps {
                echo "Deploying the application to the production environment: ${env.PRODUCTION_ENVIRONMENT}"
                // Tool: AWS
            }
            post {
                always {
                    def status = currentBuild.currentResult
                    emailext (
                        to: "${env.EMAIL_RECIPIENT}",
                        subject: "Deployment to Production - Build ${status}",
                        body: "The deployment to production has completed with status: ${status}. The build logs attached in this email.",
                        attachLog: true
                    )
                }
            }
        }
    }
}
